name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  checks: write

env:
  IMAGE_REG: docker.io
  IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/flask-devops-app

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint code
        run: flake8 .

      - name: Run tests
        run: pytest --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ always() && !env.ACT }}
        with:
          name: test-results
          path: ./test-results.xml

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() && !env.ACT }}
        with:
          files: test-results.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

  docker_build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login $IMAGE_REG -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Create datestamp image tag
        run: echo "IMAGE_TAG=$(date +%d-%m-%Y.%H%M)" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build --no-cache -t $IMAGE_REPO:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push $IMAGE_REPO:${{ env.IMAGE_TAG }}

      - name: Push latest tag
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag $IMAGE_REPO:${{ env.IMAGE_TAG }} $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest
